	websites-- http://selenium4testing.com/hms/							
	  https://www.gmail.com
	  https://www.seleniumhq.org/
	  http://redbus.in
	  http://paytm.com							   
	  https://seleniumhq.github.io/selenium/docs/api/java/index.html?overview-tree.html
	  https://www.spicejet.com/
	  http://www.way2sms.com/
	  https://www.facebook.com/


**openBrowser**

		System.setProperty("webdriver.chrome.driver", "D:\\SELENIUM_November\\Weekend_Batch\\Automation\\lib\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.get("http://localhost:8081/hms");
		
**Login**
		driver.findElement(By.name("username")).sendKeys("admin");
		driver.findElement(By.name("password")).sendKeys("admin");
		driver.findElement(By.name("submit")).click();
		
**instance variable**
		WebDriver  driver;     //instance variable
		
		
**LinkText		driver.findElement(By.linkText("Logout")).click();


**Junit Annotations****
		@Test
		public void test_002()
		{
			System.out.println("test_002 method");
		}
		@Before//1
		public void setUp() throws Exception 
		{
			System.out.println("before method");
		}
	
		@After
		public void tearDown() throws Exception 
		{
			System.out.println("after method");
		}
	
**ImplicitWait**

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		
	
**Dropdown_Handling**
		
		public void dropdown_visibletext()
		{
			new Select(driver.findElement(By.name("PATIENT_CAT"))).selectByVisibleText("Insurance");
		}
		public void dropdown_byvalue() 
		{
			new Select(driver.findElement(By.name("RELIGION"))).selectByValue("Hindu"); 
		}
		public void dropdown_byIndex()
		{
			new Select(driver.findElement(By.name("EDUCATION"))).selectByIndex(2);
		}
		
			Dropdown_Handling d =new Dropdown_Handling();
				d.dropdown_visibletext();
				d.dropdown_byvalue();
				d.dropdown_byIndex();
				
**AlertHandling**
		public void getalertdata()
		{
			String alertdata=driver.switchTo().alert().getText();
			System.out.println(alertdata);
			driver.switchTo().alert().accept();
		}

**Annotations*TestNG *

		@Test
		public void test_001() {
		System.out.println("test_001 method");
		}
		@BeforeMethod
		@AfterMethod
		@BeforeClass
		@AfterClass
		@BeforeTest
		@AfterTest
		@BeforeSuite
		@AfterSuite
		
**ClickLinks*TestNG_style*
	
		WebDriver driver;
		WebDriverWait wait;
		
		public void click(String locator) {
		driver.findElement(By.linkText(locator)).click();}
		
		@Test
		public void f(){
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText("Projects")));}
	
	
**TestNG Path_style**

			System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+"//lib//chromedriver.exe");
			
			
**Get_Title*TestNG*

		@Test
		public void f() throws Exception 
		{
		  String homepage=driver.getTitle();
		  System.out.println(homepage);
		  click("Projects");
		  String projects=driver.getTitle();
			if (homepage.equalsIgnoreCase(projects)) 
			{
				System.out.println("Unable to click on projects");
			}
		else 
		{
			System.out.println("Navigated to projects page");
		}
			Thread.sleep(2000);
			click("Download");
			String download= driver.getTitle();
			Assert.assertEquals(projects.equals(download), false);
			System.out.println("-------------");
		}
		
		
**TestNG_isDisplayed**
		
		@Test
		public void f() {
		WebElement username = driver.findElement(By.name("username"));
		Assert.assertEquals(username.isDisplayed(), true);
		username.sendKeys("admin");}
		
**TestNG*_isEnabled**
		@Test
		public void f() {
		WebElement login=driver.findElement(By.xpath("/html/body/div[4]/div/section/div/div/div/div/form/div[4]/button"));
		Assert.assertTrue(login.isEnabled()); 
		}
		
**TestNG*Login_Logout**
		
		@BeforeTest(enabled=false)//1
		public void beforeTest() {
		System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+"//lib//chromedriver.exe");
		driver=new ChromeDriver();
		driver.get("http://localhost:8081/hms"); 
		}
		
		@Test(priority=1,description="verify the login functionality")
		public void login() {
			System.out.println("login method");	
		}
		
		@Test(priority=2)
		public void abc() {
		System.out.println("abc method");}
			
		@AfterTest
		public void afterTest() {
		System.out.println("after test");}
		
**TestNG*ScreenShot_Validation**
		
		@Test
		public void f() 
		{
		File f=  ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
				
**TestNG*Window_Handling**

		@Test
			public void f() throws Exception {
			driver.findElement(By.name("username")).sendKeys("admin");
				driver.findElement(By.name("password")).sendKeys("admin");
			    driver.findElement(By.name("submit")).click();
				Thread.sleep(3000);
				driver.findElement(By.linkText("Feedback")).click();
			Set<String> s=driver.getWindowHandles();
			Object[] str=  s.toArray();	
				driver.switchTo().window(str[1].toString());
			    driver.findElement(By.id("name")).sendKeys("test");
		    	driver.close();
				driver.switchTo().window(str[0].toString());
				Thread.sleep(3000);
				driver.findElement(By.linkText("Logout")).click();}

**WebTable_Handling**

	@Test
	public void f() {
		
		WebElement table=driver.findElement(By.xpath("/html/body/div[2]/div/div[2]"));
		List<WebElement> rows= table.findElements(By.tagName("tr"));
		  for (int i = 0; i < rows.size(); i++) 
	       {
			List<WebElement> columns=rows.get(i).findElements(By.tagName("td"));
					
			 for (int j = 0; j < columns.size(); j++) 
   			  {
				System.out.print(columns.get(j).getText() +" || ");
			  }
				System.out.println();
		   }
		}

**TestNG*Take_Screenshot**		//this should be outside of annotation. No @Test needed at all.
	
		
	public void screenshot(String  screenshotName) throws Exception
	{
	  Date d=new Date();
	  SimpleDateFormat df=new SimpleDateFormat("YYYY_MMM_dd_hh_mm_ss a");
	  String time= df.format(d);
	  
	  File f= ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
	  FileUtils.copyFile(f, new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\images\\"+screenshotName+time+".png"));
	}
			
    @Test	
    public void f() throws Exception	
	{
	   //http://www.java2s.com/Code/Jar/o/Downloadorgapachecommonsiojar.htm
		screenshot("Loginpage");	}
			
**Print_Links **

		@Test
		public void f() 
		{
		  List<WebElement> links=driver.findElements(By.tagName("a"));
		  System.out.println(links.size());
		  for (int i = 0; i <links.size(); i++) 
		   {
			 if (!links.get(i).getText().equalsIgnoreCase("")) 
			   {
				System.out.println(links.get(i).getText());
			   }	
		   }
		}
				

**Print_Fields**						
				
		@Test
		public void f() 
		{	
		List<WebElement> textboxes=driver.findElements(By.tagName("input"));
		System.out.println(textboxes.size());
		for (int i = 0; i < textboxes.size(); i++) 
			 {
			  if (textboxes.get(i).getAttribute("type").equalsIgnoreCase("text")) 
				{
				  System.out.println(textboxes.get(i).getAttribute("name"));	
				}	
			 }
		  System.out.println("--------------------------------");
		}
					
		@Test
		public void print_mandatoryfields() 
		{
		  String box=driver.findElement(By.xpath("/html/body/div[2]/div/div[2]")).getText();
			// System.out.println(box);
			String[] s=   box.split("\n");
			for (int i = 0; i < s.length; i++)
			{
              if (s[i].contains("*"))
			  {
				System.out.println(s[i]);
			  }
			} 
		}
				
**GetOptions**
	@Test
	public void f() 
	{
	  List<WebElement> dropdownvalues=new Select(driver.findElement(By.name("PATIENT_CAT"))).getOptions();
	  for (int i = 0; i < dropdownvalues.size(); i++)
	   {
			System.out.println(dropdownvalues.get(i).getText());
	   }
	}
				
				
**Frame_Handling**			Take EAMPLE of paytm   //driver.get("http://paytm.com");

	@Test
	 public void f() throws Exception
	 {
		driver.findElement(By.xpath("//*[@id=\"app\"]/div/div[2]/div[2]/div[3]/div[3]/div")).click();
		Thread.sleep(3000);
					  
		WebElement f=driver.findElement(By.xpath("//*[@id=\"app\"]/div/div[6]/div[2]/div/iframe"));
		driver.switchTo().frame(f);
		driver.findElement(By.xpath("//*[@id=\"wallet-container-new qr-bg-white\"]/qr-code-login/div[2]/div[2]/div[3]/span")).click();   
	 }				

							
**FrameHandling_Index**    Take EAMPLE of paytm   //driver.get("http://paytm.com");

	 @Test
	  public void f() 
	   {
		  List<WebElement> l=driver.findElements(By.tagName("frame"));
		  System.out.println(l.size());
		  driver.switchTo().frame(1);
		  driver.findElement(By.xpath("/html/body/div/ul/li[1]/a")).click();
		  //driver.switchTo().defaultContent();
	   }
				
				
**Collections_Example**

	  @Test
	   public void list_example() 
	    {
		  ArrayList<String> a=new ArrayList<String>();
		  a.add("A");
		  a.add("B");
		  a.add("C");
		  a.add("D");
		  a.add("E");
		  System.out.println(a.get(2));
		  for (int i = 0; i < a.size(); i++)
			{
				System.out.println(a.get(i));
		    }	  
		}
  
  
		@Test
		public void set_example() 
		{
        	HashSet<String> h=new HashSet<String>();
			h.add("X");
			h.add("A");
			h.add("M");
			String s[] = {"a","b"};
			System.out.println(s);
			System.out.println(h);
			     //cursors --> to get the objects from collection
			     //1. Enumarator
				 //2 Iterator
				 // 3. List iterator
					  
			Iterator<String> itr=h.iterator();
			while (itr.hasNext()) 
			{
				System.out.println(itr.next());	
			}	 	  
		}
		
**Ajax_Handling**		//EAMPLE  driver.get("http://redbus.in");

	@Test
	 public void f() throws Exception 
	 {
		driver.findElement(By.xpath(".//*[@id='src']")).sendKeys("Hyd");
	    Thread.sleep(5000);
	    WebElement ajax_values=  driver.findElement(By.xpath(".//*[@id='search']/div/div[1]/div/ul"));
					
		List<WebElement> values= ajax_values.findElements(By.tagName("li"));
		for (WebElement option : values)
		{
		   if (option.getText().equalsIgnoreCase("Hyderpora")) 
			{
		    	option.click();
				break;	
			}	
		}	
	 }
				
*** Multiple_Browsers

		public class MultipleBrowsers 
		{
		  WebDriver driver;
		  @Parameters("Browser")
		  @Test
		  public void f(String browserName) 
		  {
			if (browserName.equalsIgnoreCase("chrome")) 
		    {
				System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+"//lib//chromedriver.exe");
				driver=new ChromeDriver();	
		    }
		    else if (browserName.equalsIgnoreCase("firefox"))
		    {
				System.setProperty("webdriver.gecko.driver", System.getProperty("user.dir")+"//lib//geckodriver.exe");
				driver=new FirefoxDriver();
	        }
			driver.get("http://selenium4testing.com/hms");
		  }
		}

		
*****Actions*************

***Mouse_Hover***
	
	@Test
	public void f() throws Exception 
	{
	  WebElement more=driver.findElement(By.xpath("//*[@id=\"app\"]/div/div[3]/div/div[1]/div/div/div"));
	  Actions a=new Actions(driver);
	  a.moveToElement(more).build().perform();
	  Thread.sleep(3000);
	  driver.findElement(By.xpath("//*[@id=\"app\"]/div/div[3]/div/div[1]/div/div/div/div/div/a[7]/span")).click();
	}

***Scroll_Down_up****

	public void f() throws Exception 
	{
	  Actions a=new Actions(driver);
	  a.sendKeys(Keys.END).build().perform();
	  
	  Thread.sleep(4000);
	  a.sendKeys(Keys.HOME).build().perform();
	  Thread.sleep(4000);
	  a.sendKeys(Keys.PAGE_DOWN).build().perform();
	  Thread.sleep(4000);
	  a.sendKeys(Keys.PAGE_UP).build().perform();
    }

	
********Sikuli******


****ClickOnNavigate****
	
	public class ClickOnNavigate
	{
		@Test
		public void f() throws Exception
		{
			Screen s=new Screen();
			s.click("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\sikuliimages.sikuli\\1545450734705.png");
		}
    }


*******File_Upload*****
 
	public void f() throws Exception 
	{
	 // driver.findElement(By.name("image")).sendKeys("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\sikuliimages.sikuli\\1545450734705.png");
	  driver.findElement(By.name("image")).click();
	  Thread.sleep(2000);
	  Screen s=new Screen();
	  s.type("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\sikuliimages.sikuli\\1545451272879.png", "D:\\TRT\\Capture.JPG");//(file name path, image to upload);
      s.click("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\sikuliimages.sikuli\\1545451285364.png");
	}

	
****Mouse_Hover****

	public void f() throws Exception
	{
	  Screen s=new Screen();
	  s.mouseMove("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\sikuliimages.sikuli\\1545451786647.png");
      Thread.sleep(2000);
      s.click("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\sikuliimages.sikuli\\1545451804100.png");     
	}


*******Data_Driven*****

******Data_Read*******

public void f() throws Exception
 {
	  File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Test.xlsx");
	  FileInputStream fi=new FileInputStream(f);
	  XSSFWorkbook w=new XSSFWorkbook(fi);
	  XSSFSheet s=w.getSheet("Sheet1");
	  for (int i = 1; i <= s.getLastRowNum(); i++) 
	  {
		try 
		{
			driver.findElement(By.name("username")).sendKeys(s.getRow(i).getCell(0).getStringCellValue());
			driver.findElement(By.name("password")).sendKeys(s.getRow(i).getCell(1).getStringCellValue());
			driver.findElement(By.name("submit")).click();
			Thread.sleep(2000);
			driver.findElement(By.linkText("Logout")).click();
		}   catch (Exception e)
				{
				driver.switchTo().alert().accept();
				}
	  }
  }


*****Data_Read_Write*****

 public void f() throws Exception 
 {
	  File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Test.xlsx");
	  FileInputStream fi=new FileInputStream(f);
	  XSSFWorkbook w=new XSSFWorkbook(fi);
	  XSSFSheet s=w.getSheet("Sheet1");
	  String str;
	  FileOutputStream fo=new FileOutputStream(f);
	  for (int i = 1; i <= s.getLastRowNum(); i++)
	  {
		  try
			{
			  driver.findElement(By.name("username")).sendKeys(s.getRow(i).getCell(0).getStringCellValue());
			  driver.findElement(By.name("password")).sendKeys(s.getRow(i).getCell(1).getStringCellValue());
			  driver.findElement(By.name("submit")).click();
			  Thread.sleep(2000);
			  driver.findElement(By.linkText("Logout")).click();
			  str="pass";
			} 
			catch (Exception e) 
			{
			  str="fail";
			  driver.switchTo().alert().accept();
		    }
		      s.getRow(i).createCell(2).setCellValue(str);
	 }
			  //rows-loop
		      s.getRow(0).createCell(2).setCellValue("Result");
		      w.write(fo);
		      w.close();
 }
 

******DataDrive_Read_Write******

public class DataDrive_Read_Write
 {
	WebDriver driver;
	String str;
	@Test
    public void f() throws Exception 
	{
	 File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Data.xlsx");
	 FileInputStream fi=new FileInputStream(f);
	 XSSFWorkbook w=new XSSFWorkbook(fi);
	 XSSFSheet s=w.getSheet("Sheet1");
	 FileOutputStream fo=new FileOutputStream(f);
	 for (int i = 1; i <= s.getLastRowNum(); i++) 
	 {  
	  try
	   {
		  if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("url"))
		  {
			 driver.get(s.getRow(i).getCell(2).getStringCellValue());					
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("textbox"))
		  {
			 driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).sendKeys(s.getRow(i).getCell(5).getStringCellValue());		
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("button"))
		  {
		     driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();	
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("link"))
		  {
			 driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();		
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("wait")) 
		  {
			 Thread.sleep(5000);	
		  }
		  str="pass";
	   } 
			catch (Exception e)
			{
				str="fail";	
			}
				s.getRow(i).createCell(6).setCellValue(str);
				}//rows--loop
				s.getRow(0).createCell(6).setCellValue("Result");
				w.write(fo);
				w.close();
    }

********DataDriven_Read*********

public void f() throws Exception
 {
	  File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Data.xlsx");
	  FileInputStream fi=new FileInputStream(f);
	  XSSFWorkbook w=new XSSFWorkbook(fi);
	  XSSFSheet s=w.getSheet("Sheet1");
	  for (int i = 0; i <= s.getLastRowNum(); i++)
	  {		  
		  if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("url")) 
		  {
			  driver.get(s.getRow(i).getCell(2).getStringCellValue());			
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("textbox"))
		  {
			  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).sendKeys(s.getRow(i).getCell(5).getStringCellValue());		
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("button")) 
		  {
			  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();			
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("link"))
		  {
			  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();			
	      }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("wait"))
		  {
			  Thread.sleep(5000);			
		  }		
	 }
 }

*****DataDriven_Read_Write_MultipleTestdata******

 public void f() throws Exception 
 {
    File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Multipletestdata.xlsx");
    FileInputStream fi=new FileInputStream(f);
    XSSFWorkbook w=new XSSFWorkbook(fi);
	XSSFSheet s=w.getSheet("Sheet1");
	FileOutputStream fo=new FileOutputStream(f);
	XSSFRow headerrow=  s.getRow(0);
	int Header_col=	headerrow.getLastCellNum();
	for (int testdata = 5; testdata <Header_col; testdata++) 
	{
	    for (int i = 1; i <= s.getLastRowNum(); i++) 
		{			  
		   try 
			  {
				if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("url"))
				{
					  driver.get(s.getRow(i).getCell(2).getStringCellValue());				
				}
				else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("textbox"))
				{
					driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).sendKeys(s.getRow(i).getCell(testdata).getStringCellValue());					
				}
			    else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("button")) 
				{
					  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();		
				}
				else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("link"))
				{
					  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();					
				}
				else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("wait"))
				{
					  Thread.sleep(5000);					
				}
				str="pass";
			 } 	
		   catch (Exception e) 
				{
				str="fail";				
			    }
				s.getRow(i).createCell(testdata+3).setCellValue(str);
				}//rows--loop
				s.getRow(0).createCell(testdata+3).setCellValue(s.getRow(0).getCell(testdata).getStringCellValue()+" Result");
				}//testdata loop
				w.write(fo);
				w.close();
} 


*******DataDriven_Read_Write_Mutipletestdata_Multiple_Sheets********

 public void f() throws Exception 
 {
  File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Multipletestdata.xlsx");
  FileInputStream fi=new FileInputStream(f);
  XSSFWorkbook w=new XSSFWorkbook(fi);
  XSSFSheet s;
	  
  FileOutputStream fo=new FileOutputStream(f);
  for (int sheets = 0; sheets < w.getNumberOfSheets(); sheets++) 
  {
	 s =w.getSheetAt(sheets);
	XSSFRow headerrow=  s.getRow(0);
	int Header_col=	headerrow.getLastCellNum();
				
	for (int testdata = 5; testdata <Header_col; testdata++)
	{
		for (int i = 1; i <= s.getLastRowNum(); i++)
		{			  
		   try
			{
				if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("url")) 
				{
				 driver.get(s.getRow(i).getCell(2).getStringCellValue());					
			    }
				else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("textbox")) {
					  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).sendKeys(s.getRow(i).getCell(testdata).getStringCellValue());				
				}
				  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("button")) {
					  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();					
				}
				  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("link")) {
					  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();					
				}
				  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("wait")) {
					  Thread.sleep(5000);					
				}
				str="pass";
			}
			catch (Exception e)
			{
				str="fail";
				driver.switchTo().alert().accept();				
			}
			s.getRow(i).createCell(testdata+3).setCellValue(str);
			}//rows--loop
			s.getRow(0).createCell(testdata+3).setCellValue(s.getRow(0).getCell(testdata).getStringCellValue()+" Result");
			}//testdata loop
			}//sheets loop
			w.write(fo);
			w.close();
}

*****Excel_Read******

public void f() throws Exception
 {
	  File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Test.xlsx");
	  FileInputStream fi=new FileInputStream(f);
	  XSSFWorkbook w=new XSSFWorkbook(fi);
	  XSSFSheet s=w.getSheet("Sheet1");
	  System.out.println(s.getRow(0).getCell(0).getStringCellValue());	  
 }

 
 *****Excel_Write*****
 
 
 public void f() throws Exception 
 {
	  FileOutputStream fo=new FileOutputStream("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Result.xlsx");
	  XSSFWorkbook w=new XSSFWorkbook();
	  XSSFSheet s=w.createSheet("Test");
	  s.createRow(0).createCell(0).setCellValue("Username");
	  s.getRow(0).createCell(1).setCellValue("Password");
	  w.write(fo);
	  w.close();	  
 }


 *****Excel_Write_Existed******
 
 public void f() throws Exception 
 {
	  File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Test.xlsx");
	  FileInputStream fi=new FileInputStream(f);
	  XSSFWorkbook w=new XSSFWorkbook(fi);
	  XSSFSheet s=w.getSheet("Sheet1");
	  FileOutputStream fo=new FileOutputStream(f);
	  s.getRow(0).createCell(2).setCellValue("Result");
	  w.write(fo);
	  w.close();
 }
	
	
******TotalDataRead_From_Excel******

public void f() throws Exception
 {
	File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Test.xlsx");
	FileInputStream fi=new FileInputStream(f);
	XSSFWorkbook w=new XSSFWorkbook(fi);
	XSSFSheet s=w.getSheet("Sheet1");
	int rows_count= s.getLastRowNum();
	 for (int i = 0; i <= rows_count; i++) 
	 {
	   XSSFRow row= s.getRow(i);
	   for (int j = 0; j < row.getLastCellNum(); j++) 
	   {
			System.out.print(row.getCell(j).getStringCellValue()+" || ");		
	   }
		System.out.println();
	 }
 }
  
  
		
			websites-- http://selenium4testing.com/hms/							
	  https://www.gmail.com
	  https://www.seleniumhq.org/
	  http://redbus.in
	  http://paytm.com							   
	  https://seleniumhq.github.io/selenium/docs/api/java/index.html?overview-tree.html
	  https://www.spicejet.com/
	  http://www.way2sms.com/
	  https://www.facebook.com/


**openBrowser**

		System.setProperty("webdriver.chrome.driver", "D:\\SELENIUM_November\\Weekend_Batch\\Automation\\lib\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.get("http://localhost:8081/hms");
		
**Login**
		driver.findElement(By.name("username")).sendKeys("admin");
		driver.findElement(By.name("password")).sendKeys("admin");
		driver.findElement(By.name("submit")).click();
		
**instance variable**
		WebDriver  driver;     //instance variable
		
		
**LinkText		driver.findElement(By.linkText("Logout")).click();


**Junit Annotations****
		@Test
		public void test_002()
		{
			System.out.println("test_002 method");
		}
		@Before//1
		public void setUp() throws Exception 
		{
			System.out.println("before method");
		}
	
		@After
		public void tearDown() throws Exception 
		{
			System.out.println("after method");
		}
	
**ImplicitWait**

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		
	
**Dropdown_Handling**
		
		public void dropdown_visibletext()
		{
			new Select(driver.findElement(By.name("PATIENT_CAT"))).selectByVisibleText("Insurance");
		}
		public void dropdown_byvalue() 
		{
			new Select(driver.findElement(By.name("RELIGION"))).selectByValue("Hindu"); 
		}
		public void dropdown_byIndex()
		{
			new Select(driver.findElement(By.name("EDUCATION"))).selectByIndex(2);
		}
		
			Dropdown_Handling d =new Dropdown_Handling();
				d.dropdown_visibletext();
				d.dropdown_byvalue();
				d.dropdown_byIndex();
				
**AlertHandling**
		public void getalertdata()
		{
			String alertdata=driver.switchTo().alert().getText();
			System.out.println(alertdata);
			driver.switchTo().alert().accept();
		}

**Annotations*TestNG *

		@Test
		public void test_001() {
		System.out.println("test_001 method");
		}
		@BeforeMethod
		@AfterMethod
		@BeforeClass
		@AfterClass
		@BeforeTest
		@AfterTest
		@BeforeSuite
		@AfterSuite
		
**ClickLinks*TestNG_style*
	
		WebDriver driver;
		WebDriverWait wait;
		
		public void click(String locator) {
		driver.findElement(By.linkText(locator)).click();}
		
		@Test
		public void f(){
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText("Projects")));}
	
	
**TestNG Path_style**

			System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+"//lib//chromedriver.exe");
			
			
**Get_Title*TestNG*

		@Test
		public void f() throws Exception 
		{
		  String homepage=driver.getTitle();
		  System.out.println(homepage);
		  click("Projects");
		  String projects=driver.getTitle();
			if (homepage.equalsIgnoreCase(projects)) 
			{
				System.out.println("Unable to click on projects");
			}
		else 
		{
			System.out.println("Navigated to projects page");
		}
			Thread.sleep(2000);
			click("Download");
			String download= driver.getTitle();
			Assert.assertEquals(projects.equals(download), false);
			System.out.println("-------------");
		}
		
		
**TestNG_isDisplayed**
		
		@Test
		public void f() {
		WebElement username = driver.findElement(By.name("username"));
		Assert.assertEquals(username.isDisplayed(), true);
		username.sendKeys("admin");}
		
**TestNG*_isEnabled**
		@Test
		public void f() {
		WebElement login=driver.findElement(By.xpath("/html/body/div[4]/div/section/div/div/div/div/form/div[4]/button"));
		Assert.assertTrue(login.isEnabled()); 
		}
		
**TestNG*Login_Logout**
		
		@BeforeTest(enabled=false)//1
		public void beforeTest() {
		System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+"//lib//chromedriver.exe");
		driver=new ChromeDriver();
		driver.get("http://localhost:8081/hms"); 
		}
		
		@Test(priority=1,description="verify the login functionality")
		public void login() {
			System.out.println("login method");	
		}
		
		@Test(priority=2)
		public void abc() {
		System.out.println("abc method");}
			
		@AfterTest
		public void afterTest() {
		System.out.println("after test");}
		
**TestNG*ScreenShot_Validation**
		
		@Test
		public void f() 
		{
		File f=  ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
				
**TestNG*Window_Handling**

		@Test
			public void f() throws Exception {
			driver.findElement(By.name("username")).sendKeys("admin");
				driver.findElement(By.name("password")).sendKeys("admin");
			    driver.findElement(By.name("submit")).click();
				Thread.sleep(3000);
				driver.findElement(By.linkText("Feedback")).click();
			Set<String> s=driver.getWindowHandles();
			Object[] str=  s.toArray();	
				driver.switchTo().window(str[1].toString());
			    driver.findElement(By.id("name")).sendKeys("test");
		    	driver.close();
				driver.switchTo().window(str[0].toString());
				Thread.sleep(3000);
				driver.findElement(By.linkText("Logout")).click();}

**WebTable_Handling**

	@Test
	public void f() {
		
		WebElement table=driver.findElement(By.xpath("/html/body/div[2]/div/div[2]"));
		List<WebElement> rows= table.findElements(By.tagName("tr"));
		  for (int i = 0; i < rows.size(); i++) 
	       {
			List<WebElement> columns=rows.get(i).findElements(By.tagName("td"));
					
			 for (int j = 0; j < columns.size(); j++) 
   			  {
				System.out.print(columns.get(j).getText() +" || ");
			  }
				System.out.println();
		   }
		}

**TestNG*Take_Screenshot**		//this should be outside of annotation. No @Test needed at all.
	
		
	public void screenshot(String  screenshotName) throws Exception
	{
	  Date d=new Date();
	  SimpleDateFormat df=new SimpleDateFormat("YYYY_MMM_dd_hh_mm_ss a");
	  String time= df.format(d);
	  
	  File f= ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
	  FileUtils.copyFile(f, new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\images\\"+screenshotName+time+".png"));
	}
			
    @Test	
    public void f() throws Exception	
	{
	   //http://www.java2s.com/Code/Jar/o/Downloadorgapachecommonsiojar.htm
		screenshot("Loginpage");	}
			
**Print_Links **

		@Test
		public void f() 
		{
		  List<WebElement> links=driver.findElements(By.tagName("a"));
		  System.out.println(links.size());
		  for (int i = 0; i <links.size(); i++) 
		   {
			 if (!links.get(i).getText().equalsIgnoreCase("")) 
			   {
				System.out.println(links.get(i).getText());
			   }	
		   }
		}
				

**Print_Fields**						
				
		@Test
		public void f() 
		{	
		List<WebElement> textboxes=driver.findElements(By.tagName("input"));
		System.out.println(textboxes.size());
		for (int i = 0; i < textboxes.size(); i++) 
			 {
			  if (textboxes.get(i).getAttribute("type").equalsIgnoreCase("text")) 
				{
				  System.out.println(textboxes.get(i).getAttribute("name"));	
				}	
			 }
		  System.out.println("--------------------------------");
		}
					
		@Test
		public void print_mandatoryfields() 
		{
		  String box=driver.findElement(By.xpath("/html/body/div[2]/div/div[2]")).getText();
			// System.out.println(box);
			String[] s=   box.split("\n");
			for (int i = 0; i < s.length; i++)
			{
              if (s[i].contains("*"))
			  {
				System.out.println(s[i]);
			  }
			} 
		}
				
**GetOptions**
	@Test
	public void f() 
	{
	  List<WebElement> dropdownvalues=new Select(driver.findElement(By.name("PATIENT_CAT"))).getOptions();
	  for (int i = 0; i < dropdownvalues.size(); i++)
	   {
			System.out.println(dropdownvalues.get(i).getText());
	   }
	}
				
				
**Frame_Handling**			Take EAMPLE of paytm   //driver.get("http://paytm.com");

	@Test
	 public void f() throws Exception
	 {
		driver.findElement(By.xpath("//*[@id=\"app\"]/div/div[2]/div[2]/div[3]/div[3]/div")).click();
		Thread.sleep(3000);
					  
		WebElement f=driver.findElement(By.xpath("//*[@id=\"app\"]/div/div[6]/div[2]/div/iframe"));
		driver.switchTo().frame(f);
		driver.findElement(By.xpath("//*[@id=\"wallet-container-new qr-bg-white\"]/qr-code-login/div[2]/div[2]/div[3]/span")).click();   
	 }				

							
**FrameHandling_Index**    Take EAMPLE of paytm   //driver.get("http://paytm.com");

	 @Test
	  public void f() 
	   {
		  List<WebElement> l=driver.findElements(By.tagName("frame"));
		  System.out.println(l.size());
		  driver.switchTo().frame(1);
		  driver.findElement(By.xpath("/html/body/div/ul/li[1]/a")).click();
		  //driver.switchTo().defaultContent();
	   }
				
				
**Collections_Example**

	  @Test
	   public void list_example() 
	    {
		  ArrayList<String> a=new ArrayList<String>();
		  a.add("A");
		  a.add("B");
		  a.add("C");
		  a.add("D");
		  a.add("E");
		  System.out.println(a.get(2));
		  for (int i = 0; i < a.size(); i++)
			{
				System.out.println(a.get(i));
		    }	  
		}
  
  
		@Test
		public void set_example() 
		{
        	HashSet<String> h=new HashSet<String>();
			h.add("X");
			h.add("A");
			h.add("M");
			String s[] = {"a","b"};
			System.out.println(s);
			System.out.println(h);
			     //cursors --> to get the objects from collection
			     //1. Enumarator
				 //2 Iterator
				 // 3. List iterator
					  
			Iterator<String> itr=h.iterator();
			while (itr.hasNext()) 
			{
				System.out.println(itr.next());	
			}	 	  
		}
		
**Ajax_Handling**		//EAMPLE  driver.get("http://redbus.in");

	@Test
	 public void f() throws Exception 
	 {
		driver.findElement(By.xpath(".//*[@id='src']")).sendKeys("Hyd");
	    Thread.sleep(5000);
	    WebElement ajax_values=  driver.findElement(By.xpath(".//*[@id='search']/div/div[1]/div/ul"));
					
		List<WebElement> values= ajax_values.findElements(By.tagName("li"));
		for (WebElement option : values)
		{
		   if (option.getText().equalsIgnoreCase("Hyderpora")) 
			{
		    	option.click();
				break;	
			}	
		}	
	 }
				
*** Multiple_Browsers

		public class MultipleBrowsers 
		{
		  WebDriver driver;
		  @Parameters("Browser")
		  @Test
		  public void f(String browserName) 
		  {
			if (browserName.equalsIgnoreCase("chrome")) 
		    {
				System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+"//lib//chromedriver.exe");
				driver=new ChromeDriver();	
		    }
		    else if (browserName.equalsIgnoreCase("firefox"))
		    {
				System.setProperty("webdriver.gecko.driver", System.getProperty("user.dir")+"//lib//geckodriver.exe");
				driver=new FirefoxDriver();
	        }
			driver.get("http://selenium4testing.com/hms");
		  }
		}

		
*****Actions*************

***Mouse_Hover***
	
	@Test
	public void f() throws Exception 
	{
	  WebElement more=driver.findElement(By.xpath("//*[@id=\"app\"]/div/div[3]/div/div[1]/div/div/div"));
	  Actions a=new Actions(driver);
	  a.moveToElement(more).build().perform();
	  Thread.sleep(3000);
	  driver.findElement(By.xpath("//*[@id=\"app\"]/div/div[3]/div/div[1]/div/div/div/div/div/a[7]/span")).click();
	}

***Scroll_Down_up****

	public void f() throws Exception 
	{
	  Actions a=new Actions(driver);
	  a.sendKeys(Keys.END).build().perform();
	  
	  Thread.sleep(4000);
	  a.sendKeys(Keys.HOME).build().perform();
	  Thread.sleep(4000);
	  a.sendKeys(Keys.PAGE_DOWN).build().perform();
	  Thread.sleep(4000);
	  a.sendKeys(Keys.PAGE_UP).build().perform();
    }

	
********Sikuli******


****ClickOnNavigate****
	
	public class ClickOnNavigate
	{
		@Test
		public void f() throws Exception
		{
			Screen s=new Screen();
			s.click("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\sikuliimages.sikuli\\1545450734705.png");
		}
    }


*******File_Upload*****
 
	public void f() throws Exception 
	{
	 // driver.findElement(By.name("image")).sendKeys("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\sikuliimages.sikuli\\1545450734705.png");
	  driver.findElement(By.name("image")).click();
	  Thread.sleep(2000);
	  Screen s=new Screen();
	  s.type("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\sikuliimages.sikuli\\1545451272879.png", "D:\\TRT\\Capture.JPG");//(file name path, image to upload);
      s.click("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\sikuliimages.sikuli\\1545451285364.png");
	}

	
****Mouse_Hover****

	public void f() throws Exception
	{
	  Screen s=new Screen();
	  s.mouseMove("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\sikuliimages.sikuli\\1545451786647.png");
      Thread.sleep(2000);
      s.click("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\sikuliimages.sikuli\\1545451804100.png");     
	}


*******Data_Driven*****

******Data_Read*******

public void f() throws Exception
 {
	  File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Test.xlsx");
	  FileInputStream fi=new FileInputStream(f);
	  XSSFWorkbook w=new XSSFWorkbook(fi);
	  XSSFSheet s=w.getSheet("Sheet1");
	  for (int i = 1; i <= s.getLastRowNum(); i++) 
	  {
		try 
		{
			driver.findElement(By.name("username")).sendKeys(s.getRow(i).getCell(0).getStringCellValue());
			driver.findElement(By.name("password")).sendKeys(s.getRow(i).getCell(1).getStringCellValue());
			driver.findElement(By.name("submit")).click();
			Thread.sleep(2000);
			driver.findElement(By.linkText("Logout")).click();
		}   catch (Exception e)
				{
				driver.switchTo().alert().accept();
				}
	  }
  }


*****Data_Read_Write*****

 public void f() throws Exception 
 {
	  File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Test.xlsx");
	  FileInputStream fi=new FileInputStream(f);
	  XSSFWorkbook w=new XSSFWorkbook(fi);
	  XSSFSheet s=w.getSheet("Sheet1");
	  String str;
	  FileOutputStream fo=new FileOutputStream(f);
	  for (int i = 1; i <= s.getLastRowNum(); i++)
	  {
		  try
			{
			  driver.findElement(By.name("username")).sendKeys(s.getRow(i).getCell(0).getStringCellValue());
			  driver.findElement(By.name("password")).sendKeys(s.getRow(i).getCell(1).getStringCellValue());
			  driver.findElement(By.name("submit")).click();
			  Thread.sleep(2000);
			  driver.findElement(By.linkText("Logout")).click();
			  str="pass";
			} 
			catch (Exception e) 
			{
			  str="fail";
			  driver.switchTo().alert().accept();
		    }
		      s.getRow(i).createCell(2).setCellValue(str);
	 }
			  //rows-loop
		      s.getRow(0).createCell(2).setCellValue("Result");
		      w.write(fo);
		      w.close();
 }
 

******DataDrive_Read_Write******

public class DataDrive_Read_Write
 {
	WebDriver driver;
	String str;
	@Test
    public void f() throws Exception 
	{
	 File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Data.xlsx");
	 FileInputStream fi=new FileInputStream(f);
	 XSSFWorkbook w=new XSSFWorkbook(fi);
	 XSSFSheet s=w.getSheet("Sheet1");
	 FileOutputStream fo=new FileOutputStream(f);
	 for (int i = 1; i <= s.getLastRowNum(); i++) 
	 {  
	  try
	   {
		  if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("url"))
		  {
			 driver.get(s.getRow(i).getCell(2).getStringCellValue());					
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("textbox"))
		  {
			 driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).sendKeys(s.getRow(i).getCell(5).getStringCellValue());		
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("button"))
		  {
		     driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();	
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("link"))
		  {
			 driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();		
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("wait")) 
		  {
			 Thread.sleep(5000);	
		  }
		  str="pass";
	   } 
			catch (Exception e)
			{
				str="fail";	
			}
				s.getRow(i).createCell(6).setCellValue(str);
				}//rows--loop
				s.getRow(0).createCell(6).setCellValue("Result");
				w.write(fo);
				w.close();
    }

********DataDriven_Read*********

public void f() throws Exception
 {
	  File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Data.xlsx");
	  FileInputStream fi=new FileInputStream(f);
	  XSSFWorkbook w=new XSSFWorkbook(fi);
	  XSSFSheet s=w.getSheet("Sheet1");
	  for (int i = 0; i <= s.getLastRowNum(); i++)
	  {		  
		  if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("url")) 
		  {
			  driver.get(s.getRow(i).getCell(2).getStringCellValue());			
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("textbox"))
		  {
			  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).sendKeys(s.getRow(i).getCell(5).getStringCellValue());		
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("button")) 
		  {
			  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();			
		  }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("link"))
		  {
			  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();			
	      }
		  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("wait"))
		  {
			  Thread.sleep(5000);			
		  }		
	 }
 }

*****DataDriven_Read_Write_MultipleTestdata******

 public void f() throws Exception 
 {
    File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Multipletestdata.xlsx");
    FileInputStream fi=new FileInputStream(f);
    XSSFWorkbook w=new XSSFWorkbook(fi);
	XSSFSheet s=w.getSheet("Sheet1");
	FileOutputStream fo=new FileOutputStream(f);
	XSSFRow headerrow=  s.getRow(0);
	int Header_col=	headerrow.getLastCellNum();
	for (int testdata = 5; testdata <Header_col; testdata++) 
	{
	    for (int i = 1; i <= s.getLastRowNum(); i++) 
		{			  
		   try 
			  {
				if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("url"))
				{
					  driver.get(s.getRow(i).getCell(2).getStringCellValue());				
				}
				else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("textbox"))
				{
					driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).sendKeys(s.getRow(i).getCell(testdata).getStringCellValue());					
				}
			    else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("button")) 
				{
					  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();		
				}
				else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("link"))
				{
					  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();					
				}
				else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("wait"))
				{
					  Thread.sleep(5000);					
				}
				str="pass";
			 } 	
		   catch (Exception e) 
				{
				str="fail";				
			    }
				s.getRow(i).createCell(testdata+3).setCellValue(str);
				}//rows--loop
				s.getRow(0).createCell(testdata+3).setCellValue(s.getRow(0).getCell(testdata).getStringCellValue()+" Result");
				}//testdata loop
				w.write(fo);
				w.close();
} 


*******DataDriven_Read_Write_Mutipletestdata_Multiple_Sheets********

 public void f() throws Exception 
 {
  File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Multipletestdata.xlsx");
  FileInputStream fi=new FileInputStream(f);
  XSSFWorkbook w=new XSSFWorkbook(fi);
  XSSFSheet s;
	  
  FileOutputStream fo=new FileOutputStream(f);
  for (int sheets = 0; sheets < w.getNumberOfSheets(); sheets++) 
  {
	 s =w.getSheetAt(sheets);
	XSSFRow headerrow=  s.getRow(0);
	int Header_col=	headerrow.getLastCellNum();
				
	for (int testdata = 5; testdata <Header_col; testdata++)
	{
		for (int i = 1; i <= s.getLastRowNum(); i++)
		{			  
		   try
			{
				if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("url")) 
				{
				 driver.get(s.getRow(i).getCell(2).getStringCellValue());					
			    }
				else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("textbox")) {
					  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).sendKeys(s.getRow(i).getCell(testdata).getStringCellValue());				
				}
				  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("button")) {
					  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();					
				}
				  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("link")) {
					  driver.findElement(By.xpath(s.getRow(i).getCell(2).getStringCellValue())).click();					
				}
				  else if (s.getRow(i).getCell(4).getStringCellValue().equalsIgnoreCase("wait")) {
					  Thread.sleep(5000);					
				}
				str="pass";
			}
			catch (Exception e)
			{
				str="fail";
				driver.switchTo().alert().accept();				
			}
			s.getRow(i).createCell(testdata+3).setCellValue(str);
			}//rows--loop
			s.getRow(0).createCell(testdata+3).setCellValue(s.getRow(0).getCell(testdata).getStringCellValue()+" Result");
			}//testdata loop
			}//sheets loop
			w.write(fo);
			w.close();
}

*****Excel_Read******

public void f() throws Exception
 {
	  File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Test.xlsx");
	  FileInputStream fi=new FileInputStream(f);
	  XSSFWorkbook w=new XSSFWorkbook(fi);
	  XSSFSheet s=w.getSheet("Sheet1");
	  System.out.println(s.getRow(0).getCell(0).getStringCellValue());	  
 }

 
 *****Excel_Write*****
 
 
 public void f() throws Exception 
 {
	  FileOutputStream fo=new FileOutputStream("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Result.xlsx");
	  XSSFWorkbook w=new XSSFWorkbook();
	  XSSFSheet s=w.createSheet("Test");
	  s.createRow(0).createCell(0).setCellValue("Username");
	  s.getRow(0).createCell(1).setCellValue("Password");
	  w.write(fo);
	  w.close();	  
 }


 *****Excel_Write_Existed******
 
 public void f() throws Exception 
 {
	  File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Test.xlsx");
	  FileInputStream fi=new FileInputStream(f);
	  XSSFWorkbook w=new XSSFWorkbook(fi);
	  XSSFSheet s=w.getSheet("Sheet1");
	  FileOutputStream fo=new FileOutputStream(f);
	  s.getRow(0).createCell(2).setCellValue("Result");
	  w.write(fo);
	  w.close();
 }
	
	
******TotalDataRead_From_Excel******

public void f() throws Exception
 {
	File f=new File("D:\\SELENIUM_November\\Weekend_Batch\\Automation\\testdata\\Test.xlsx");
	FileInputStream fi=new FileInputStream(f);
	XSSFWorkbook w=new XSSFWorkbook(fi);
	XSSFSheet s=w.getSheet("Sheet1");
	int rows_count= s.getLastRowNum();
	 for (int i = 0; i <= rows_count; i++) 
	 {
	   XSSFRow row= s.getRow(i);
	   for (int j = 0; j < row.getLastCellNum(); j++) 
	   {
			System.out.print(row.getCell(j).getStringCellValue()+" || ");		
	   }
		System.out.println();
	 }
 }
  
  
	
*********************Page Object Model***********************************

**********LoginMethods**********************

package com.hms.components;

public class LoginMethods extends Base_Class 
{
	LoginPage_Locators loginlocators=new LoginPage_Locators();
	
	public void launchApp() 
	{
		openBrowser(readData.testDataValue.get("browser"));
		openURL(readData.testDataValue.get("TestURL"));	
	}
	public void login() throws Exception 
	{
		type(loginlocators.username, readData.testDataValue.get("username"));
		type(loginlocators.password, readData.testDataValue.get("password"));
		click(loginlocators.login);
		
	}

}

********************Registration_Methods***************

package com.hms.components;


public class Registration_Methods extends Base_Class
 {
	RegistrationPage_Locators registrationpage=new RegistrationPage_Locators();
	LoginPage_Locators loginlocators=new LoginPage_Locators();
	
	public void launchApp()
	{
		openBrowser(readData.testDataValue.get("browser"));
		openURL(readData.testDataValue.get("TestURL"));		
	}
	public void login() throws Exception 
	{
		type(loginlocators.username, readData.testDataValue.get("username"));
		type(loginlocators.password, readData.testDataValue.get("password"));
		click(loginlocators.login);	
	}
	
	public void registration() throws Exception 
	{
		click(registrationpage.registration);
		wait(2000);
		click(registrationpage.per_registration);
		select(registrationpage.PATIENT_CAT, readData.testDataValue.get("PATIENT_CAT"));
		select(registrationpage.RELATION, readData.testDataValue.get("RELATION"));
		type(registrationpage.image, readData.testDataValue.get("image"));
		type(registrationpage.firstname, readData.testDataValue.get("firstname"));		
	}
}

******LoginPage_Locators*********

package com.hms.objects;

public class LoginPage_Locators 
{	
  public By username=By.name("username");
  public By password=By.xpath("//input[@name='password']");
  public By login=By.name("submit");
}

**********RegistrationPage_Locators**************

package com.hms.objects;

public class RegistrationPage_Locators
 {
	public By registration=By.linkText("Registration");
	public By per_registration=By.linkText("Permanent Registration");
	public By PATIENT_CAT=By.name("PATIENT_CAT");
	public By RELATION=By.name("RELATION");
	public By image=By.name("image");
	public By firstname=By.name("PNT_NAME");
}

**********LoginTestscripts-**************

package com.hms.testCases;

public class LoginTestscripts extends Base_Class 
{
	LoginMethods methods=new LoginMethods();
    @Test(description="verify the login functionality")
    public void f() throws Exception 
	{
	  readData.readTestDataFile("D:\\SELENIUM_November\\Weekend_Batch\\Hms_POM\\testdata\\Test.xlsx", "1");
	  methods.launchApp();
	  methods.login();
    }
}

***********RegistrationScript*****************

package com.hms.testCases;

public class RegistrationScript extends Base_Class
 {
	Registration_Methods regmethods=new Registration_Methods();
    @Test
    public void f() throws Exception 
	{
	  readData.readTestDataFile("D:\\SELENIUM_November\\Weekend_Batch\\Hms_POM\\testdata\\Test.xlsx", "2");
	  regmethods.launchApp();
	  regmethods.login();
	  regmethods.registration();	  
    }
}

***********Base_Class*************

package com.hms.utility;

public class Base_Class 
{
public WebDriver driver;
public static ReadData readData=new ReadData();
public Logger log=Logger.getLogger(Base_Class.class);


public void openBrowser(String browserName)
{
	if (browserName.equalsIgnoreCase("firefox")) 
	{
		System.setProperty("webdriver.gecko.driver", "D:\\SELENIUM_November\\Weekend_Batch\\Hms_POM\\lib\\geckodriver.exe");
		driver=new FirefoxDriver();		
	}
	else if (browserName.equalsIgnoreCase("ie")) 
	{
		System.setProperty("webdriver.ie.driver", System.getProperty("user.dir")+"\\lib\\IEDriverServer.exe");
		driver=new InternetExplorerDriver();	
	}
	else if (browserName.equalsIgnoreCase("chrome"))
	{
		System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+"\\lib\\chromedriver.exe");
		driver=new ChromeDriver();	
	}
	driver.manage().window().maximize();
	
}

public void openURL(String url)
{
	driver.get(url);
	
}
public void click(By locator) throws Exception
{
	driver.findElement(locator).click();
}
public void type(By locator, String data) throws Exception
{
	try 
	{
		driver.findElement(locator).clear();
		driver.findElement(locator).sendKeys(data);
	} 
	catch (Exception e) 
	{
		System.out.println("Error in entering the text in element");
	}
}

public void select(By locator,String value)
{
	try 
	{
		Select dropdown=new Select(driver.findElement(locator));
		dropdown.selectByVisibleText(value);
	} 
	catch (Exception e) 
	{
		System.out.println("Error in selecting value from dropdown");
	}	
}

public void selectbyvalue(By locator,String value)
{
	try
	{
		Select dropdown=new Select(driver.findElement(locator));
		dropdown.selectByValue(value);
	} 
	catch (Exception e)
	{
		System.out.println("Error in selecting value from dropdown");
	}	
}

public void selectByindex(By locator,int index)
{
	try
	{
		Select dropdown=new Select(driver.findElement(locator));
		dropdown.selectByIndex(index);
	}
	catch (Exception e) 
	{
		System.out.println("Error in selecting value from dropdown");
	}
}
	
public void scroll_up(String action)
{
	Actions a=new Actions(driver);
	if (action.equalsIgnoreCase("home")) 
	{
		a.sendKeys(Keys.HOME).perform();		
	}
	else if (action.equalsIgnoreCase("pageup")) 
	{
		a.sendKeys(Keys.PAGE_UP).perform();	 	
	}	
}

public void scroll_down(String action)
{
	Actions a=new Actions(driver);
	if (action.equalsIgnoreCase("end"))
	{
		a.sendKeys(Keys.END).perform();	
	}
	else if (action.equalsIgnoreCase("pagedown")) 
	{
		a.sendKeys(Keys.PAGE_DOWN).perform();		
	}
	else if (action.equalsIgnoreCase("downarrow")) {
		a.keyDown(Keys.CONTROL).sendKeys(Keys.ARROW_DOWN).build().perform();		
	}	
}
public void acceptAlert(String alert)
{	
	if (alert.equalsIgnoreCase("accept")) 
	{
		driver.switchTo().alert().accept();		
	}
	else if (alert.equalsIgnoreCase("dismiss"))
	{
		driver.switchTo().alert().dismiss();		
	}	
}
public String getAlertData()
{
	Alert alert=driver.switchTo().alert();
	String alertdata=alert.getText();
	return alertdata;	
}
public void switchtowindow(int c)
{
	try
	{
		String childwindow=(String)driver.getWindowHandles().toArray()[c];
		driver.switchTo().window(childwindow);
	}
	catch (Exception e)
	{
		System.out.println("Error in switching windows: "+c);
	}
}

}//class close bracket


**************ReadData****************

package com.hms.utility;

public class ReadData
{
		public Map<String, String> testData = new HashMap<String, String>();
		public Map<String, String> testDataValue = new HashMap<String, String>();;
		public  long testCaseStartTime;
		public  long testCaseStopTime;
		public  long testCaseElapsedTime;
		public  String strCaseStartTime;
		public  String strCaseStopTime;
		public  static File suiteFolder;
		protected static File testFolder;
		private static File suiteFile;
		public static String suiteFilePath;
		public static String suiteName;
		public static String testCaseReportsFolder = "Test";
		public static String snapShotsFolder = "Snapshots";
		public  String filePath;
		public  List<String> testCaseStartTimeList = new ArrayList();
		public  List<Integer> failCount = new ArrayList();
		public  List<Integer> passCount = new ArrayList();
		public  List<String> testCaseEndTimeList = new ArrayList();
		public  List<String> testCaseNameList = new ArrayList();
		public  List<String> testCaseDescriptionList = new ArrayList();
		public  final SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
		public  final SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy");
		public static  final SimpleDateFormat DATE_FORMAT_NOW = new SimpleDateFormat("yyyyMMddHHmmss");
		public static long testStepTempTime;
		public  List<String> testStepElapsedTimeList = new ArrayList();
		public static List<String> testCaseElapsedTimeList = new ArrayList();
		public static File snapShotFolder;
		public  List<String> snapShotPathList = new ArrayList();
		public static  Map<String, String> statusMap = new HashMap();
		public  List<String> stepCount = new ArrayList();
		public  List<String> stepDescription = new ArrayList();
		public  List<String> stepDescription1 = new ArrayList();
	
		public  List<String> stepPrequisite = new ArrayList();
		public  List<String> stepExpected = new ArrayList();
		public  List<String> stepActual = new ArrayList();
		public  List<String> stepStatus = new ArrayList();
		public  static List<String> stepStatus1 = new ArrayList();
	
		public  List<String> objectEvidence = new ArrayList();
		public List<String> testCaseName = new ArrayList();
		public  List<String> testCaseDesc = new ArrayList();
		public static List<String> testCaseName1 = new ArrayList();
		public static List<String> testFullName= new ArrayList();
		public static List<String> testmethod1 = new ArrayList();
		public static List<String> testCaseDesc1 = new ArrayList();
		public static List<String> testCaseStartTimeList1 = new ArrayList();
		public static List<String> testCaseEndTimeList1 = new ArrayList();
		public static List<String> classes= new ArrayList <String>();
		public static List<String> methods= new ArrayList <String>();
		public static List<String> errorDes= new ArrayList <String>();
		public static List<String> ScreenShots= new ArrayList <String>();
		public  String screenShotPath = null;
		
	
			
	public  void readTestDataFile(String filePath, String tcID) throws Exception
	{
	  int s = 0;
			try
			{
				FileInputStream testRunReport = new FileInputStream(filePath);
				Workbook workbook ;
				Sheet  worksheet;
				int n=filePath.indexOf(".");
				String extension=filePath.substring(n);
				if (extension.equalsIgnoreCase(".xlsx"))
				{
					workbook=new XSSFWorkbook(testRunReport);
				}
				else
				{
					workbook=new HSSFWorkbook(testRunReport);
				}
				int sheets=workbook.getNumberOfSheets();
				System.out.println("sheets "+sheets);
				int j=0;
				List<String> arrayOfString = new ArrayList<>();;
				// for(s=0; s<sheets; s++ ){
				// XSSFSheet worksheet = workbook.getSheetAt(s);
				String str=workbook.getSheetName(0);
				System.out.println(str);
				if(str.contains("PreCondition"))
				{
					worksheet=workbook.getSheet(str);
					Row Headertrow = worksheet.getRow(0);
					// for(int i=1;i<=totalrows;i++){
					Row currentrowww = worksheet.getRow(1);
					int columns=currentrowww.getLastCellNum();
					for (int k = 0; k < columns; k++) 
					{ 
						if(currentrowww !=null)
						{
							Cell cellkey = Headertrow.getCell(k);
							System.out.println("cellkey "+cellkey); 
							Cell cellValue = currentrowww.getCell(k);
							System.out.println("cellValue "+cellValue);
							System.out.println("-----------------------------");
							if(cellkey.toString() != "")
							{
								if(!arrayOfString.contains(cellkey.toString()))
								{
									arrayOfString.add(cellkey.toString());
									testData.put(cellkey.toString(), cellValue.toString());
								}
								else
								{
									System.out.println("Duplicate Key In Test Data File : "+cellkey.toString());
								//	throw new AutomationException("Duplicate Key In Test Data File : "+cellkey.toString());
								}
							}
							else
							{
								System.out.println("Row is empty in Test Data file : ");
							}
						}
					}
					//}
				} 
				String str1=workbook.getSheetName(1); 
				System.out.println(str1);
				if(str1.contains("data"))
				{
					worksheet=workbook.getSheet(str1);
					Row Headertrow = worksheet.getRow(0);
					// int totalrows = worksheet.getLastRowNum()-worksheet.getFirstRowNum();
					int startValue=Integer.parseInt(tcID);
					int endValue=startValue; 
					for(int i=startValue; i<=endValue;i++)
					{
						Row currentrow = worksheet.getRow(i);
						int columns=currentrow.getLastCellNum();
						// if(currentrow.getCell(1).getStringCellValue().equalsIgnoreCase(BaseClass.tcno)){ 
						for (int k = 0; k < columns; k++) 
						{ 
							if(currentrow !=null)
							{
								Cell cellkey = Headertrow.getCell(k);
								System.out.println("cellkey "+cellkey); 
								Cell cellValue = currentrow.getCell(k);
								System.out.println("cellValue "+cellValue);
								System.out.println("-----------------------------");
								if(cellkey.toString() != "")
								{
									if(!arrayOfString.contains(cellkey.toString()))
									{
										arrayOfString.add(cellkey.toString());
										testData.put(cellkey.toString(), cellValue.toString());
										testDataValue.put(cellkey.toString(), cellValue.toString());
									}
									else
									{
										System.out.println("Duplicate Key In Test Data File : "+cellkey.toString());
										//throw new AutomationException("Duplicate Key In Test Data File : "+cellkey.toString());
									}
								}
								else
								{
									System.out.println("Row is empty in Test Data file : "+(i+1));
								}
							}
						}
						//}
					}
				}
			}
			catch (IOException localIOException)
			{
				System.out.println("Unable to read test data file : " + s);
			}
			catch (Exception localAutomationException)
			{
				throw localAutomationException;
			}  
	}
}










	
		